buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'io.github.cosmicsilence.scalafix' version '0.1.14'
    id "com.github.maiflai.scalatest" version "0.32"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'scala'
apply plugin: 'org.parchmentmc.librarian.forgegradle'


version = '1.18.2-1.0'
group = 'com.yuuki1293.bookbook'
//noinspection GroovyUnusedAssignment
archivesBaseName = 'bookbook'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.08.21-1.18.2'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bookbook'

            mods {
                bookbook {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bookbook'

            mods {
                bookbook {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bookbook'

            mods {
                bookbook {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'bookbook', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                bookbook {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            it.includeModule("org.typelevel", "cats-core_${scala_major}")
            it.includeModule("org.typelevel", "cats-kernel_${scala_major}")
        }
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    repositories.stream().filter { it instanceof MavenArtifactRepository }.forEach { repo ->
        repo.content {
            excludeVersionByRegex(".*", ".*", ".*_mapped_snapshot_.*")
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.80'

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    implementation(group: 'org.scala-lang', name: 'scala-library', version: scala_version)
    implementation(group: 'org.typelevel', name: "cats-core_${scala_major}", version: '2.8.5-kotori')

    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(), version: "2.13.8-build-4", classifier: "with-library") {
        transitive(false)
    }

    testImplementation(group: 'org.scalatest', name: "scalatest_${scala_major}", version: '3.2.14')
    testImplementation(group: 'com.vladsch.flexmark', name: 'flexmark-all', version: '0.64.0')
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "bookbook",
                "Specification-Vendor"    : "yuuki1293",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "yuuki1293",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-Ywarn-unused"]
}